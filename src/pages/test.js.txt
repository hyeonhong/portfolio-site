import React, { useLayoutEffect, useState } from 'react';
import { useStaticQuery, graphql } from 'gatsby';
import Img from 'gatsby-image';
import { makeStyles } from '@material-ui/core/styles';
import {
  AppBar,
  Toolbar,
  Container,
  Divider,
  Hidden,
  Grid,
  Drawer,
  Typography,
  Button,
  Paper,
  Box,
  Link as MuiLink
} from '@material-ui/core';

import IconButton from '@material-ui/core/IconButton';
import MenuIcon from '@material-ui/icons/Menu';

import DashboardIcon from '@material-ui/icons/Dashboard';
import ShoppingCartIcon from '@material-ui/icons/ShoppingCart';
import PeopleIcon from '@material-ui/icons/People';
import LayersIcon from '@material-ui/icons/Layers';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faGithub, faLinkedin } from '@fortawesome/free-brands-svg-icons';
import { faDownload } from '@fortawesome/free-solid-svg-icons';
// import { faFile } from '@fortawesome/free-regular-svg-icons';

import NewLayout from '../components/NewLayout';
import DrawerList from '../components/DrawerList';
import SEO from '../components/Seo';
import projects from '../content/projects';

const useStyles = makeStyles((theme) => ({
  '@global': {
    body: {
      backgroundColor: theme.palette.common.white
    }
  },

  appBar: {
    [theme.breakpoints.up('sm')]: {
      display: 'none'
    }
  },
  menuButton: {
    marginRight: theme.spacing(2),
    [theme.breakpoints.up('sm')]: {
      // display: 'none'
    }
  },
  drawer: {
    [theme.breakpoints.up('sm')]: {
      // flexShrink: 0
    }
  },
  root: {
    display: 'flex'
  },
  content: {
    flexGrow: 1
    // padding: theme.spacing(3)
  },
  paper: {
    padding: theme.spacing(2),
    textAlign: 'center',
    color: theme.palette.text.secondary,
    flex: '1 0 auto',
    margin: theme.spacing(1)
  }
}));

const TestPage = ({ data }) => {
  const classes = useStyles();

  const [size, setSize] = useState([0, 0]);
  useLayoutEffect(() => {
    function updateSize() {
      setSize([window.innerWidth, window.innerHeight]);
    }
    window.addEventListener('resize', updateSize);
    updateSize();
    return () => window.removeEventListener('resize', updateSize);
  }, []);

  const [width, height] = size;

  return (
    <NewLayout>
      <p>
        Window size: {width} x {height}
      </p>

      {/* load multiple images */}
      {data.images.edges.map((edge) => {
        return (
          <Img
            key={edge.node.id}
            fixed={edge.node.childImageSharp.fixed}
            alt={edge.node.name}
            justify="center"
          />
        );
      })}

      <div className={classes.drawer}>
        <Hidden smUp>
          <Paper className={classes.paper}>smUp - Hide above 600px</Paper>
        </Hidden>
        <Hidden xsDown>
          <Paper className={classes.paper}>xsDown - Hide below 600px</Paper>
        </Hidden>
      </div>
    </NewLayout>
  );
};

export default TestPage;

// Do multiple queries using alias
export const query = graphql`
  query {
    images: allFile(
      filter: { extension: { regex: "/(jpeg|jpg|gif|png)/" }, sourceInstanceName: { eq: "images" } }
    ) {
      edges {
        node {
          id
          name
          childImageSharp {
            fixed(width: 200, height: 200) {
              ...GatsbyImageSharpFixed
            }
          }
        }
      }
    }

    siteInfo: site {
      siteMetadata {
        author
      }
    }
  }
`;
